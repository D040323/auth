PROCEDURE "ROLE_MAINTENANCE"."auth.auth.procedures::PR_GRANT_SELECT_ON VIEWS_IN_SYS_BIC_FOR_PACKAGE" (IN  InputParPack NVARCHAR (256)) 
	LANGUAGE SQLSCRIPT
	SQL SECURITY DEFINER 
 	DEFAULT SCHEMA ROLE_MAINTENANCE
--	READS SQL DATA 
	AS
BEGIN
-- >>>>>> ATTENTION!!!                                      <<<<<<<<<
-- >>>>>> please take care for correct package name input!  <<<<<<<<<
-- to run this procedure, use the following:
-- CALL  "ROLE_MAINTENANCE"."auth.auth.procedures::PR_GRANT_SELECT_ON VIEWS_IN_SYS_BIC_FOR_PACKAGE" ('test');


/* *****************************************************************************************************/
/* procedure "ROLE_MAINTENANCE"."auth.auth.procedures::PR_GRANT_SELECT_ON VIEWS_IN_SYS_BIC_FOR_PACKAGE"        */
/* *****************************************************************************************************/
/* short description */
-- This is a procedure to grant the SELECT privilege on several views to a role.

/* details about resulting role */
-- The result role, named #_SYS_BIC_VIEWS_<pppp>_SELECT,
-- will contain the SELECT privilege on those views
-- of schema _SYS_BIC which belong to package <pppp> and are valid.

-- There will be always a comparison of old and new status made
-- meaning if there exist more activated views in schema "_SYS_BIC" 
-- than currently are included in the role,
-- then exactly these view names will be added to the role.
-- In case the role does not exist so far, the role hull will be created.
-- In case a view does not exist anymore, 
-- all privileges on this view will be removed from every role or user automatically.

-- In case an SQLEXCEPTION happens during the try to grant the SELECT privilege on a view to the role,
-- first the table WRAPPER_GRANT_PRIVILEGE_ERROR_LOG will be filled with details about
-- the failing statement, the specific view and the occured error.
-- Second the according grant attempt terminates.
-- Third the next view selected by CURSOR is taken for the grant attempt.
-- Fourth the user will be informed on failed grant attempts and successful grants.

/* details about procedure parameters */
-- Input parameter (InputParPack) must be a package name ('abcd' for example);
-- a slash / AND a wildcard % will be added within the procedure;
-- There is no output parameter.

/* procedure version: 02.07.2014 */
/* *************************************************************************************/



/* **********************  define variables ****************************************/
-- define a variable which will be used to count;
-- define role name;
-- define a variable which will be used for statement creation;
-- define package name;
-- define a variable to count errors;
DECLARE varCounter        INTEGER;
DECLARE varRole           VARCHAR (512) := '#_SYS_BIC_VIEWS_' || :InputParPack || '_SELECT';
DECLARE varStatement      VARCHAR (512) := '';
DECLARE varPackSlashLike  VARCHAR (512) := :InputParPack || '/%';
DECLARE varPackDotLike    VARCHAR (512) := :InputParPack || '.%';
DECLARE varCounterError   INTEGER       := 0;
/* *********************** /
/* D040323 enhance Procedure by copr packages per content */

DECLARE varPackSlashLikeCorp  VARCHAR (512) := 'corp' || varPackSlashLike || '/%';
DECLARE varPackDotLikeCorp    VARCHAR (512) := 'corp' || varPackDotLike || '.%';

/* **********************  end define variables *************************************/



/* **********************  cursor ***************************************************/
-- create a temporary table named ITERATOR, filled with selected rows
-- the selection is defined by input parameter given by end-user who calls the procedure
-- and the selection is limited to to the following:
-- - views which name is <package>/* or <package>.*
-- - views belonging to schema _SYS_BIC
-- - valid views
-- - column views
-- - procedures with owner = _SYS_REPO
-- - views not granted to role #_SYS_BIC_VIEWS_<pppp>_SELECT already
DECLARE  CURSOR ITERATOR FOR
    SELECT T3.SCHEMA_NAME,
           T3.VIEW_NAME
    FROM ( SELECT T1.SCHEMA_NAME, T1.VIEW_NAME  
           FROM 
           ( SELECT * 
             FROM PUBLIC.VIEWS
             WHERE (     VIEW_NAME LIKE :varPackSlashLike
                     OR  VIEW_NAME LIKE :varPackDotLike  )
                     AND SCHEMA_NAME    = '_SYS_BIC' 
                     AND IS_VALID       = 'TRUE'
				     AND IS_COLUMN_VIEW = 'TRUE'
           ) AS T1
           INNER JOIN
           ( SELECT * 
             FROM OWNERSHIP 
             WHERE OWNER_NAME = '_SYS_REPO'
           ) AS T2
           ON  T1.SCHEMA_NAME = T2.SCHEMA_NAME
           AND T1.VIEW_NAME   = T2.OBJECT_NAME
    	 ) AS T3
    	 LEFT OUTER JOIN
    	 ( SELECT * 
    	   FROM PUBLIC.GRANTED_PRIVILEGES 
           WHERE     GRANTEE     = :varRole
                 AND SCHEMA_NAME = '_SYS_BIC' 
                 AND (    OBJECT_NAME LIKE :varPackSlashLike
                       OR OBJECT_NAME LIKE :varPackDotLike   )
    	 ) AS T4
    	 ON T3.VIEW_NAME = T4.OBJECT_NAME 
    WHERE T4.OBJECT_NAME IS NULL;
/* **********************  end cursor **************************************************/


BEGIN
/* **********************  check if role does exist ************************************/
-- check if the role #_SYS_BIC_VIEWS_<pppp>_SELECT to be filled does exist;
-- if not, create it;
varCounter := 1;
SELECT COUNT(*) INTO varCounter FROM PUBLIC.ROLES WHERE ROLE_NAME = :varRole;
IF (varCounter = 0)
THEN
    varStatement := 'CREATE ROLE "' || :varRole || '"'; 
    EXEC :varStatement;
END IF;
/* **********************  end check if role does exist *********************************/




/* **********************  grant privileges to role ************************************/
-- for each row of the temporary table ITERATOR,
-- concatenate an SQL statement AND execute it,
-- meaning fill the role with SELECT privileges on views belonging to a specific package;
-- in case of an SQLEXCEPTION, meaning an SQL_ERROR_CODE != 0 appears,
-- write details about the error into the table WRAPPER_GRANT_PRIVILEGE_ERROR_LOG
-- and terminate the execution of the varStatement;
FOR each_row AS ITERATOR DO 
    BEGIN
        DECLARE EXIT HANDLER FOR SQLEXCEPTION
        BEGIN
            varStatement := 'GRANT SELECT ON "' || each_row.SCHEMA_NAME || '"."' || each_row.VIEW_NAME || '" TO "' || :varRole || '"'; 
            IF (::SQL_ERROR_CODE != 0) THEN
                /*
                INSERT INTO "ROLE_MAINTENANCE"."WRAPPER_GRANT_PRIVILEGE_ERROR_LOG"
		        VALUES ( (SELECT NOW () FROM DUMMY),
                         :varStatement,
                         (SELECT SESSION_CONTEXT('APPLICATIONUSER') FROM DUMMY),
						 '_SYS_BIC',
                         (SELECT each_row.VIEW_NAME FROM DUMMY), 
                         (SELECT OBJECT_TYPE FROM PUBLIC.OBJECTS WHERE OBJECT_NAME = each_row.VIEW_NAME),
                         (SELECT ::SQL_ERROR_CODE FROM DUMMY),
                         (SELECT ::SQL_ERROR_MESSAGE FROM DUMMY)
                       );
                */
                varCounterError := varCounterError + 1;
            END IF;
        END;
        varStatement := 'GRANT SELECT ON "' || each_row.SCHEMA_NAME || '"."' || each_row.VIEW_NAME || '" TO "' || :varRole || '"'; 
        EXEC :varStatement; 
        EXEC 'commit';
    END;
END FOR;
/* **********************  end grant privileges to role ************************************/


/* **********************  display the failing views    ************************************/
-- in case one or more SQLEXCEPTIONs occurred, display a list of all views
-- which have been taken into account for grant SELECT privilege on it to the role
-- and mention the status for each view;
IF (varCounterError <> 0)
THEN
    SELECT T3.SCHEMA_NAME AS "Name of schema",
           T3.VIEW_NAME   AS "Name of view",
           CASE IFNULL(T4.OBJECT_NAME, 'F' ) 
                WHEN 'F' THEN 'FAILED' 
                ELSE 'Successful' 
                END AS "Status: Inclusion of view privilege to role"
    FROM ( SELECT T1.SCHEMA_NAME, T1.VIEW_NAME  
           FROM 
           ( SELECT * 
             FROM PUBLIC.VIEWS
             WHERE (     VIEW_NAME LIKE :varPackSlashLike
                     OR  VIEW_NAME LIKE :varPackDotLike  )
                     AND SCHEMA_NAME    = '_SYS_BIC' 
                     AND IS_VALID       = 'TRUE'
				     AND IS_COLUMN_VIEW = 'TRUE'
           ) AS T1
           INNER JOIN
           ( SELECT * 
             FROM OWNERSHIP 
             WHERE OWNER_NAME = '_SYS_REPO'
           ) AS T2
           ON  T1.SCHEMA_NAME = T2.SCHEMA_NAME
           AND T1.VIEW_NAME   = T2.OBJECT_NAME
    	 ) AS T3
    	 LEFT OUTER JOIN
    	 ( SELECT * 
    	   FROM PUBLIC.GRANTED_PRIVILEGES 
           WHERE     GRANTEE     = :varRole
                 AND SCHEMA_NAME = '_SYS_BIC' 
                 AND (    OBJECT_NAME LIKE :varPackSlashLike
                       OR OBJECT_NAME LIKE :varPackDotLike  )
    	 ) AS T4
    	 ON T3.VIEW_NAME = T4.OBJECT_NAME 
    ORDER BY 3 ASC;
END IF;
/* **********************  end display the failing views  ************************************/


/* **********************  end procedure  ****************************************************/
END;
END;